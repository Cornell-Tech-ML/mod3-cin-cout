MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (163)  
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (163) 
-------------------------------------------------------------------------------------------|loop #ID
    def _map(                                                                              | 
        out: Storage,                                                                      | 
        out_shape: Shape,                                                                  | 
        out_strides: Strides,                                                              | 
        in_storage: Storage,                                                               | 
        in_shape: Shape,                                                                   | 
        in_strides: Strides,                                                               | 
    ) -> None:                                                                             | 
        # TODO: Implement for Task 3.1.                                                    | 
                                                                                           | 
        # When 'out' and 'in' are stride-aligned, avoid indexing                           | 
        if list(out_shape) == list(in_shape) and list(out_strides) == list(in_strides):    | 
            for i in prange(len(out)):-----------------------------------------------------| #2
                out[i] = fn(in_storage[i])                                                 | 
            return                                                                         | 
        else:                                                                              | 
            for i in prange(len(out)):-----------------------------------------------------| #3
                out_index: Index = np.zeros(MAX_DIMS, np.int32)----------------------------| #0
                in_index: Index = np.zeros(MAX_DIMS, np.int32)-----------------------------| #1
                to_index(i, out_shape, out_index)                                          | 
                broadcast_index(out_index, out_shape, in_shape, in_index)                  | 
                o = index_to_position(out_index, out_strides)                              | 
                j = index_to_position(in_index, in_strides)                                | 
                out[o] = fn(in_storage[j])                                                 | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
 
Fused loop summary:
+--0 has the following loops fused into it:
   +--1 (fused)
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #2, #3, #0).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--3 is a parallel loop
   +--0 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--3 (parallel)
   +--0 (parallel)
   +--1 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--3 (parallel)
   +--0 (serial, fused with loop(s): 1)


 
Parallel region 0 (loop #3) had 1 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#3).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (180) is 
hoisted out of the parallel loop labelled #3 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: out_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (181) is 
hoisted out of the parallel loop labelled #3 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: in_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (231)  
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (231) 
-----------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _zip(                                                                                                                | 
        out: Storage,                                                                                                        | 
        out_shape: Shape,                                                                                                    | 
        out_strides: Strides,                                                                                                | 
        a_storage: Storage,                                                                                                  | 
        a_shape: Shape,                                                                                                      | 
        a_strides: Strides,                                                                                                  | 
        b_storage: Storage,                                                                                                  | 
        b_shape: Shape,                                                                                                      | 
        b_strides: Strides,                                                                                                  | 
    ) -> None:                                                                                                               | 
        # TODO: Implement for Task 3.1.                                                                                      | 
        if list(out_shape) == list(a_shape) == list(b_shape) and list(out_strides) == list(a_strides) == list(b_strides):    | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------| #7
                out[i] = fn(a_storage[i], b_storage[i])                                                                      | 
            return                                                                                                           | 
        else:                                                                                                                | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------| #8
                out_index: Index = np.zeros(MAX_DIMS, np.int32)--------------------------------------------------------------| #4
                a_index: Index = np.zeros(MAX_DIMS, np.int32)----------------------------------------------------------------| #5
                b_index: Index = np.zeros(MAX_DIMS, np.int32)----------------------------------------------------------------| #6
                                                                                                                             | 
                to_index(i, out_shape, out_index)                                                                            | 
                o = index_to_position(out_index, out_strides)                                                                | 
                                                                                                                             | 
                broadcast_index(out_index, out_shape, a_shape, a_index)                                                      | 
                j = index_to_position(a_index, a_strides)                                                                    | 
                                                                                                                             | 
                broadcast_index(out_index, out_shape, b_shape, b_index)                                                      | 
                k = index_to_position(b_index, b_strides)                                                                    | 
                                                                                                                             | 
                out[o] = fn(a_storage[j], b_storage[k])                                                                      | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
 
Fused loop summary:
+--4 has the following loops fused into it:
   +--5 (fused)
   +--6 (fused)
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #7, #8, #4).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--8 is a parallel loop
   +--4 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--4 (parallel)
   +--5 (parallel)
   +--6 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--4 (serial, fused with loop(s): 5, 6)


 
Parallel region 0 (loop #8) had 2 loop(s) fused and 1 loop(s) serialized as part
 of the larger parallel loop (#8).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (249) is 
hoisted out of the parallel loop labelled #8 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: out_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (250) is 
hoisted out of the parallel loop labelled #8 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: a_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (251) is 
hoisted out of the parallel loop labelled #8 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: b_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (319)  
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (319) 
-------------------------------------------------------------------------------|loop #ID
    def _reduce(                                                               | 
        out: Storage,                                                          | 
        out_shape: Shape,                                                      | 
        out_strides: Strides,                                                  | 
        a_storage: Storage,                                                    | 
        a_shape: Shape,                                                        | 
        a_strides: Strides,                                                    | 
        reduce_dim: int,                                                       | 
    ) -> None:                                                                 | 
        # TODO: Implement for Task 3.1.                                        | 
        reduce_size = a_shape[reduce_dim]                                      | 
        reduce_stride = a_strides[reduce_dim]                                  | 
                                                                               | 
        for i in prange(len(out)):---------------------------------------------| #10
            out_index: Index = np.zeros(MAX_DIMS, np.int32)--------------------| #9
            to_index(i, out_shape, out_index)                                  | 
            o = index_to_position(out_index, out_strides)  # where to write    | 
            j = index_to_position(out_index, a_strides)    # where to read     | 
            local = out[o]  # Use local variable for reduction                 | 
            for _ in range(reduce_size):                                       | 
                local = fn(local, a_storage[j])  # Apply reduction             | 
                j += reduce_stride  # Move to next element                     | 
            out[o] = local                                                     | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #10, #9).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--10 is a parallel loop
   +--9 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--9 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--9 (serial)


 
Parallel region 0 (loop #10) had 0 loop(s) fused and 1 loop(s) serialized as 
part of the larger parallel loop (#10).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (333) is 
hoisted out of the parallel loop labelled #10 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: out_index: Index = np.zeros(MAX_DIMS, np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (371)  
================================================================================
No source available
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 0 parallel for-
loop(s) (originating from loops labelled: ).
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel structure is already optimal.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
