MAP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_map.<locals>._map, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (163)  
================================================================================


Parallel loop listing for  Function tensor_map.<locals>._map, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (163) 
-------------------------------------------------------------------------------------------|loop #ID
    def _map(                                                                              | 
        out: Storage,                                                                      | 
        out_shape: Shape,                                                                  | 
        out_strides: Strides,                                                              | 
        in_storage: Storage,                                                               | 
        in_shape: Shape,                                                                   | 
        in_strides: Strides,                                                               | 
    ) -> None:                                                                             | 
        # TODO: Implement for Task 3.1.                                                    | 
        if list(out_shape) == list(in_shape) and list(out_strides) == list(in_strides):    | 
            for i in prange(len(out)):-----------------------------------------------------| #2
                out[i] = fn(in_storage[i])                                                 | 
            return                                                                         | 
        else:                                                                              | 
            for i in prange(len(out)):-----------------------------------------------------| #3
                out_index = np.zeros(MAX_DIMS, dtype=np.int32)-----------------------------| #0
                to_index(i, out_shape, out_index)                                          | 
                in_index = np.zeros(MAX_DIMS, dtype=np.int32)------------------------------| #1
                broadcast_index(out_index, out_shape, in_shape, in_index)                  | 
                out_pos = index_to_position(out_index, out_strides)                        | 
                in_pos = index_to_position(in_index, in_strides)                           | 
                out[out_pos] = fn(in_storage[in_pos])                                      | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #2, #3, #0).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--3 is a parallel loop
   +--0 --> rewritten as a serial loop
   +--1 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--3 (parallel)
   +--0 (parallel)
   +--1 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--3 (parallel)
   +--0 (serial)
   +--1 (serial)


 
Parallel region 0 (loop #3) had 0 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#3).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (180) is 
hoisted out of the parallel loop labelled #3 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: in_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (178) is 
hoisted out of the parallel loop labelled #3 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
ZIP
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_zip.<locals>._zip, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (210)  
================================================================================


Parallel loop listing for  Function tensor_zip.<locals>._zip, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (210) 
-----------------------------------------------------------------------------------------------------------------------------|loop #ID
    def _zip(                                                                                                                | 
        out: Storage,                                                                                                        | 
        out_shape: Shape,                                                                                                    | 
        out_strides: Strides,                                                                                                | 
        a_storage: Storage,                                                                                                  | 
        a_shape: Shape,                                                                                                      | 
        a_strides: Strides,                                                                                                  | 
        b_storage: Storage,                                                                                                  | 
        b_shape: Shape,                                                                                                      | 
        b_strides: Strides,                                                                                                  | 
    ) -> None:                                                                                                               | 
        # TODO: Implement for Task 3.1.                                                                                      | 
        if list(out_shape) == list(a_shape) == list(b_shape) and list(out_strides) == list(a_strides) == list(b_strides):    | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------| #7
                out[i] = fn(a_storage[i], b_storage[i])                                                                      | 
            return                                                                                                           | 
        else:                                                                                                                | 
            for i in prange(len(out)):---------------------------------------------------------------------------------------| #8
                out_index = np.zeros(MAX_DIMS, dtype=np.int32)---------------------------------------------------------------| #4
                to_index(i, out_shape, out_index)                                                                            | 
                a_index = np.zeros(MAX_DIMS, dtype=np.int32)-----------------------------------------------------------------| #5
                b_index = np.zeros(MAX_DIMS, dtype=np.int32)-----------------------------------------------------------------| #6
                broadcast_index(out_index, out_shape, a_shape, a_index)                                                      | 
                broadcast_index(out_index, out_shape, b_shape, b_index)                                                      | 
                a_pos = index_to_position(a_index, a_strides)                                                                | 
                b_pos = index_to_position(b_index, b_strides)                                                                | 
                out[i] = fn(a_storage[a_pos], b_storage[b_pos])                                                              | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
 
Fused loop summary:
+--5 has the following loops fused into it:
   +--6 (fused)
Following the attempted fusion of parallel for-loops there are 3 parallel for-
loop(s) (originating from loops labelled: #7, #8, #4).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--8 is a parallel loop
   +--4 --> rewritten as a serial loop
   +--5 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--4 (parallel)
   +--5 (parallel)
   +--6 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--8 (parallel)
   +--4 (serial)
   +--5 (serial, fused with loop(s): 6)


 
Parallel region 0 (loop #8) had 1 loop(s) fused and 2 loop(s) serialized as part
 of the larger parallel loop (#8).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (228) is 
hoisted out of the parallel loop labelled #8 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (230) is 
hoisted out of the parallel loop labelled #8 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: a_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (231) is 
hoisted out of the parallel loop labelled #8 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: b_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
REDUCE
 
================================================================================
 Parallel Accelerator Optimizing:  Function tensor_reduce.<locals>._reduce, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (261)  
================================================================================


Parallel loop listing for  Function tensor_reduce.<locals>._reduce, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (261) 
-------------------------------------------------------------------|loop #ID
    def _reduce(                                                   | 
        out: Storage,                                              | 
        out_shape: Shape,                                          | 
        out_strides: Strides,                                      | 
        a_storage: Storage,                                        | 
        a_shape: Shape,                                            | 
        a_strides: Strides,                                        | 
        reduce_dim: int,                                           | 
    ) -> None:                                                     | 
        # TODO: Implement for Task 3.1.                            | 
        reduce_size = a_shape[reduce_dim]                          | 
        reduce_stride = a_strides[reduce_dim]                      | 
                                                                   | 
        for i in prange(len(out)):---------------------------------| #10
            out_index = np.zeros(MAX_DIMS, dtype=np.int32)---------| #9
            to_index(i, out_shape, out_index)                      | 
            out_pos = index_to_position(out_index, out_strides)    | 
            a_pos = index_to_position(out_index, a_strides)        | 
            reduce_val = out[out_pos]                              | 
            for j in range(reduce_size):                           | 
                reduce_val = fn(reduce_val, a_storage[a_pos])      | 
                a_pos += reduce_stride                             | 
            out[out_pos] = reduce_val                              | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #10, #9).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--10 is a parallel loop
   +--9 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--9 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--10 (parallel)
   +--9 (serial)


 
Parallel region 0 (loop #10) had 0 loop(s) fused and 1 loop(s) serialized as 
part of the larger parallel loop (#10).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
The memory allocation derived from the instruction at 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (275) is 
hoisted out of the parallel loop labelled #10 (it will be performed before the 
loop is executed and reused inside the loop):
   Allocation:: out_index = np.zeros(MAX_DIMS, dtype=np.int32)
    - numpy.empty() is used for the allocation.
None
MATRIX MULTIPLY
 
================================================================================
 Parallel Accelerator Optimizing:  Function _tensor_matrix_multiply, 
/Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (287)  
================================================================================


Parallel loop listing for  Function _tensor_matrix_multiply, /Users/kadelin/Desktop/Cornell/MLE/mod3-cin-cout/minitorch/fast_ops.py (287) 
-------------------------------------------------------------------------------------------------------|loop #ID
def _tensor_matrix_multiply(                                                                           | 
    out: Storage,                                                                                      | 
    out_shape: Shape,                                                                                  | 
    out_strides: Strides,                                                                              | 
    a_storage: Storage,                                                                                | 
    a_shape: Shape,                                                                                    | 
    a_strides: Strides,                                                                                | 
    b_storage: Storage,                                                                                | 
    b_shape: Shape,                                                                                    | 
    b_strides: Strides,                                                                                | 
) -> None:                                                                                             | 
    """NUMBA tensor matrix multiply function.                                                          | 
                                                                                                       | 
    Should work for any tensor shapes that broadcast as long as                                        | 
                                                                                                       | 
    ```                                                                                                | 
    assert a_shape[-1] == b_shape[-2]                                                                  | 
    ```                                                                                                | 
                                                                                                       | 
    Optimizations:                                                                                     | 
                                                                                                       | 
    * Outer loop in parallel                                                                           | 
    * No index buffers or function calls                                                               | 
    * Inner loop should have no global writes, 1 multiply.                                             | 
                                                                                                       | 
                                                                                                       | 
    Args:                                                                                              | 
    ----                                                                                               | 
        out (Storage): storage for `out` tensor                                                        | 
        out_shape (Shape): shape for `out` tensor                                                      | 
        out_strides (Strides): strides for `out` tensor                                                | 
        a_storage (Storage): storage for `a` tensor                                                    | 
        a_shape (Shape): shape for `a` tensor                                                          | 
        a_strides (Strides): strides for `a` tensor                                                    | 
        b_storage (Storage): storage for `b` tensor                                                    | 
        b_shape (Shape): shape for `b` tensor                                                          | 
        b_strides (Strides): strides for `b` tensor                                                    | 
                                                                                                       | 
    Returns:                                                                                           | 
    -------                                                                                            | 
        None : Fills in `out`                                                                          | 
                                                                                                       | 
    """                                                                                                | 
    assert a_shape[-1] == b_shape[-2]                                                                  | 
    a_batch_stride = a_strides[0] if a_shape[0] > 1 else 0                                             | 
    b_batch_stride = b_strides[0] if b_shape[0] > 1 else 0                                             | 
                                                                                                       | 
    # TODO: Implement for Task 3.2.                                                                    | 
    out_batch_stride = out_strides[0] if len(out_shape) > 2 else 0                                     | 
                                                                                                       | 
    # Outer loop over batch and output dimensions                                                      | 
    for n in prange(out_shape[0]):  # Batch------------------------------------------------------------| #13
        for i in prange(out_shape[1]):  # Output rows--------------------------------------------------| #12
            for j in prange(out_shape[2]):  # Output columns-------------------------------------------| #11
                # Calculate the position in the output tensor                                          | 
                out_pos = n * out_batch_stride + i * out_strides[1] + j * out_strides[2]               | 
                out[out_pos] = 0  # Initialize to zero for accumulation                                | 
                                                                                                       | 
                # Accumulate the dot product                                                           | 
                for k in range(a_shape[2]):  # Shared dimension                                        | 
                    # Calculate the positions in the input tensors                                     | 
                    # every row in a                                                                   | 
                    a_pos = n * a_batch_stride + i * a_strides[1] + k * a_strides[2]                   | 
                    # every col in b                                                                   | 
                    b_pos = n * b_batch_stride + k * b_strides[1] + j * b_strides[2]                   | 
                    # Perform multiplication and accumulate                                            | 
                    # after the inner loop the outpos when store the value of every row * every col    | 
                    out[out_pos] += a_storage[a_pos] * b_storage[b_pos]                                | 
--------------------------------- Fusing loops ---------------------------------
Attempting fusion of parallel loops (combines loops with similar properties)...
Following the attempted fusion of parallel for-loops there are 2 parallel for-
loop(s) (originating from loops labelled: #13, #12).
--------------------------------------------------------------------------------
---------------------------- Optimising loop nests -----------------------------
Attempting loop nest rewrites (optimising for the largest parallel loops)...
 
+--13 is a parallel loop
   +--12 --> rewritten as a serial loop
      +--11 --> rewritten as a serial loop
--------------------------------------------------------------------------------
----------------------------- Before Optimisation ------------------------------
Parallel region 0:
+--13 (parallel)
   +--12 (parallel)
      +--11 (parallel)


--------------------------------------------------------------------------------
------------------------------ After Optimisation ------------------------------
Parallel region 0:
+--13 (parallel)
   +--12 (serial)
      +--11 (serial)


 
Parallel region 0 (loop #13) had 0 loop(s) fused and 2 loop(s) serialized as 
part of the larger parallel loop (#13).
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
 
---------------------------Loop invariant code motion---------------------------
Allocation hoisting:
No allocation hoisting found
None
